// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "isiteimage.h"

/////////////////////////////////////////////////////////////////////////////
// CiSiteImage

IMPLEMENT_DYNCREATE(CiSiteImage, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CiSiteImage properties

BOOL CiSiteImage::GetInteractive()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CiSiteImage::SetInteractive(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

BOOL CiSiteImage::GetInitialized()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

/////////////////////////////////////////////////////////////////////////////
// CiSiteImage operations

BOOL CiSiteImage::Initialize(LPUNKNOWN Session)
{
	BOOL result;
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Session);
	return result;
}

BOOL CiSiteImage::DisplayImage(LPCTSTR StudyUID, LPCTSTR SeriesUID, LPCTSTR ImageUID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		StudyUID, SeriesUID, ImageUID);
	return result;
}

BOOL CiSiteImage::DisplayStack(LPCTSTR StudyUID, LPCTSTR SeriesUID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		StudyUID, SeriesUID);
	return result;
}

BOOL CiSiteImage::CloseDisplay()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CiSiteImage::GetWindowContext()
{
	CString result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CiSiteImage::SetWindowImage(LPCTSTR ImageUID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ImageUID);
	return result;
}

BOOL CiSiteImage::SetWindowView(short ZoomLevel, short Top, short Left, long WindowWIdth, long WindowCenter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ZoomLevel, Top, Left, WindowWIdth, WindowCenter);
	return result;
}

CString CiSiteImage::GetStaticWindowInfo()
{
	CString result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CiSiteImage::SetRotationOrientation(BOOL flip, long rotate)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		flip, rotate);
	return result;
}

CString CiSiteImage::GetDICOMValue(LPCTSTR DICOMTag)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		DICOMTag);
	return result;
}

long CiSiteImage::GetDICOMInstance(LPCTSTR ImageUID, VARIANT* psaData)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_PVARIANT;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ImageUID, psaData);
	return result;
}

BOOL CiSiteImage::WriteDICOMInstance(LPCTSTR bstrWindowID, LPCTSTR bstrImageUID, LPCTSTR bstrPathName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrWindowID, bstrImageUID, bstrPathName);
	return result;
}

void CiSiteImage::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
