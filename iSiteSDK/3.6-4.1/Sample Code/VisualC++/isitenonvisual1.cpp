// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "isitenonvisual1.h"

/////////////////////////////////////////////////////////////////////////////
// CiSiteNonVisual1

IMPLEMENT_DYNCREATE(CiSiteNonVisual1, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CiSiteNonVisual1 properties

CString CiSiteNonVisual1::GetISyntaxServerIP()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteNonVisual1::SetISyntaxServerIP(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CiSiteNonVisual1::GetISyntaxServerPort()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteNonVisual1::SetISyntaxServerPort(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CiSiteNonVisual1::GetImageSuiteURL()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteNonVisual1::SetImageSuiteURL(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CiSiteNonVisual1::GetImageSuiteDSN()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteNonVisual1::SetImageSuiteDSN(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

long CiSiteNonVisual1::GetCacheSizeMB()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CiSiteNonVisual1::SetCacheSizeMB(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

CString CiSiteNonVisual1::GetWorkstationLocation()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteNonVisual1::SetWorkstationLocation(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

CString CiSiteNonVisual1::GetSecurityCodes()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteNonVisual1::SetSecurityCodes(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

BOOL CiSiteNonVisual1::GetInitialized()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

CString CiSiteNonVisual1::GetOptions()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteNonVisual1::SetOptions(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

CString CiSiteNonVisual1::GetFailoveriSyntaxServerIP()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteNonVisual1::SetFailoveriSyntaxServerIP(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CiSiteNonVisual1 operations

BOOL CiSiteNonVisual1::Initialize()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CiSiteNonVisual1::Login(LPCTSTR UserName, LPCTSTR Password, LPCTSTR AuthSource, LPCTSTR Token, LPCTSTR Mnemonic)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UserName, Password, AuthSource, Token, Mnemonic);
	return result;
}

BOOL CiSiteNonVisual1::Logout()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CiSiteNonVisual1::Query(LPCTSTR QueryStr, LPCTSTR Type, long MaxResults)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		QueryStr, Type, MaxResults);
	return result;
}

long CiSiteNonVisual1::Exists(LPCTSTR QueryStr, LPCTSTR Type)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		QueryStr, Type);
	return result;
}

CString CiSiteNonVisual1::FindPatient(LPCTSTR PatientID, LPCTSTR Organziation)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		PatientID, Organziation);
	return result;
}

CString CiSiteNonVisual1::FindExam(LPCTSTR Accession, LPCTSTR PatientID, LPCTSTR Organization)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Accession, PatientID, Organization);
	return result;
}

CString CiSiteNonVisual1::GetReportData(LPCTSTR IntPatientID, LPCTSTR IntExamID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		IntPatientID, IntExamID);
	return result;
}

long CiSiteNonVisual1::GetLastErrorCode()
{
	long result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CiSiteNonVisual1::FindStudy(LPCTSTR StudyUID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		StudyUID);
	return result;
}

VARIANT CiSiteNonVisual1::InternalExecute(LPCTSTR FnName, LPCTSTR Param1, LPCTSTR Param2, LPCTSTR Param3)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		FnName, Param1, Param2, Param3);
	return result;
}

BOOL CiSiteNonVisual1::ChangePassword(LPCTSTR OldPassword, LPCTSTR NewPassword)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		OldPassword, NewPassword);
	return result;
}

CString CiSiteNonVisual1::GetCurrentUser()
{
	CString result;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CiSiteNonVisual1::LockExam(LPCTSTR OrgCode, LPCTSTR IntExamID, long Enable)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		OrgCode, IntExamID, Enable);
	return result;
}

BOOL CiSiteNonVisual1::MarkExamRead(LPCTSTR IntExamID, long bMarkReadFlg)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		IntExamID, bMarkReadFlg);
	return result;
}

BOOL CiSiteNonVisual1::SetPreference(LPCTSTR Name, LPCTSTR Type, LPCTSTR Data)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, Type, Data);
	return result;
}

CString CiSiteNonVisual1::GetPreference(LPCTSTR Name, LPCTSTR Type)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Name, Type);
	return result;
}

CString CiSiteNonVisual1::GetWorkstationLocations()
{
	CString result;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CiSiteNonVisual1::GetAuthSources()
{
	CString result;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CiSiteNonVisual1::EmergencyAccessLogin(LPCTSTR UserName, LPCTSTR Password, LPCTSTR AuthSource, LPCTSTR Token, LPCTSTR Mnemonic)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UserName, Password, AuthSource, Token, Mnemonic);
	return result;
}

CString CiSiteNonVisual1::GetCachedExams()
{
	CString result;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CiSiteNonVisual1::CacheExam(LPCTSTR bstrIntExamID, LPCTSTR bstrIntExcpID, BOOL bLockExam)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrIntExamID, bstrIntExcpID, bLockExam);
	return result;
}

BOOL CiSiteNonVisual1::ResumeCachingExam(LPCTSTR bstrIntExamID, LPCTSTR bstrIntExcpID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrIntExamID, bstrIntExcpID);
	return result;
}

BOOL CiSiteNonVisual1::CancelExamCaching(LPCTSTR bstrIntExamID, LPCTSTR bstrIntExcpID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrIntExamID, bstrIntExcpID);
	return result;
}

BOOL CiSiteNonVisual1::DeleteCachedExam(LPCTSTR bstrIntExamID, LPCTSTR bstrIntExcpID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrIntExamID, bstrIntExcpID);
	return result;
}

void CiSiteNonVisual1::DisableAutologout(BOOL bDisable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bDisable);
}

BOOL CiSiteNonVisual1::ShowDebugWindow()
{
	BOOL result;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CiSiteNonVisual1::GetFoldersAndFiltersXML(long nLevel)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nLevel);
	return result;
}

CString CiSiteNonVisual1::GetVersion()
{
	CString result;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CiSiteNonVisual1::FindException(LPCTSTR StudyUID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		StudyUID);
	return result;
}

CString CiSiteNonVisual1::QueryEx(LPCTSTR Query, LPCTSTR Type, LPCTSTR PrimarySort, long PrimarySortDir, LPCTSTR SecondarySort, long SecondSortDir, long MaxResults)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Query, Type, PrimarySort, PrimarySortDir, SecondarySort, SecondSortDir, MaxResults);
	return result;
}

long CiSiteNonVisual1::GetDICOMHeaders(LPCTSTR bstrStudyID, LPCTSTR bstrSeriesID, LPCTSTR bstrImageID, VARIANT* pBuffer)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_PVARIANT;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		bstrStudyID, bstrSeriesID, bstrImageID, pBuffer);
	return result;
}

long CiSiteNonVisual1::GetDICOMPixels(LPCTSTR bstrStudyID, LPCTSTR bstrSeriesID, LPCTSTR bstrImageID, long nLeft, long nTop, long nRight, long nBottom, long nCompressionRatio, VARIANT* pBuffer)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		bstrStudyID, bstrSeriesID, bstrImageID, nLeft, nTop, nRight, nBottom, nCompressionRatio, pBuffer);
	return result;
}

BOOL CiSiteNonVisual1::ShowiQueryWindow(LPCTSTR bstrPatientID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrPatientID);
	return result;
}

BOOL CiSiteNonVisual1::ShowExportViaDICOMWindow(LPCTSTR bstrIntExamID, LPCTSTR bstrExcpID, BOOL bCheckAll)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrIntExamID, bstrExcpID, bCheckAll);
	return result;
}

CString CiSiteNonVisual1::GetDUPUIDXML()
{
	CString result;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CiSiteNonVisual1::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
