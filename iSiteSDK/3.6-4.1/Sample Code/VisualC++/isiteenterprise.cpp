// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "isiteenterprise.h"

/////////////////////////////////////////////////////////////////////////////
// CiSiteEnterprise

IMPLEMENT_DYNCREATE(CiSiteEnterprise, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CiSiteEnterprise properties

CString CiSiteEnterprise::GetHelpPath()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteEnterprise::SetHelpPath(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

BOOL CiSiteEnterprise::GetInitialized()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

CString CiSiteEnterprise::GetOptions()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteEnterprise::SetOptions(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CiSiteEnterprise::GetBrowserPageName()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteEnterprise::SetBrowserPageName(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

CString CiSiteEnterprise::GetBrowserPageURL()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteEnterprise::SetBrowserPageURL(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

CString CiSiteEnterprise::GetCCOWOptions()
{
	CString result;
	GetProperty(0x46, VT_BSTR, (void*)&result);
	return result;
}

void CiSiteEnterprise::SetCCOWOptions(LPCTSTR propVal)
{
	SetProperty(0x46, VT_BSTR, propVal);
}

BOOL CiSiteEnterprise::GetCCOWEnabled()
{
	BOOL result;
	GetProperty(0x47, VT_BOOL, (void*)&result);
	return result;
}

void CiSiteEnterprise::SetCCOWEnabled(BOOL propVal)
{
	SetProperty(0x47, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CiSiteEnterprise operations

BOOL CiSiteEnterprise::Reset()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CiSiteEnterprise::RemoveViewMenuItem(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterViewMenuItem(LPCTSTR Name, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::CopyToClipboard(LPCTSTR WndID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		WndID);
	return result;
}

CString CiSiteEnterprise::GetWindowContext(LPCTSTR WndID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		WndID);
	return result;
}

BOOL CiSiteEnterprise::SetWindowImage(LPCTSTR WindowID, LPCTSTR ImageUID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		WindowID, ImageUID);
	return result;
}

BOOL CiSiteEnterprise::SetWindowView(LPCTSTR WindowID, short ZoomLevel, short Top, short Left, long WindowWIdth, long WindowCenter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		WindowID, ZoomLevel, Top, Left, WindowWIdth, WindowCenter);
	return result;
}

CString CiSiteEnterprise::GetStaticWindowInfo(LPCTSTR WindowID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		WindowID);
	return result;
}

CString CiSiteEnterprise::GetActiveWindow()
{
	CString result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CiSiteEnterprise::AddViewMenuItem(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::Initialize(LPUNKNOWN Session)
{
	BOOL result;
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Session);
	return result;
}

BOOL CiSiteEnterprise::ShowClinicalExamNotes(LPCTSTR CanvasPageID, LPCTSTR ShelfID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CanvasPageID, ShelfID);
	return result;
}

BOOL CiSiteEnterprise::SetShelfDragBarColor(LPCTSTR ShelfID, long Color)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ShelfID, Color);
	return result;
}

BOOL CiSiteEnterprise::AddExamMenuItem(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::RemoveExamMenuItem(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterExamMenuItem(LPCTSTR Name, LPCTSTR InsertAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, InsertAfter);
	return result;
}

CString CiSiteEnterprise::CreatePopup(LPCTSTR WindowID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		WindowID);
	return result;
}

BOOL CiSiteEnterprise::DestroyPopup(LPCTSTR WindowID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		WindowID);
	return result;
}

VARIANT CiSiteEnterprise::InternalExecute(LPCTSTR FuncName, LPCTSTR Param1, LPCTSTR Param2, LPCTSTR Param3)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		FuncName, Param1, Param2, Param3);
	return result;
}

CString CiSiteEnterprise::GetDICOMValue(LPCTSTR WindowID, LPCTSTR DICOMTag)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		WindowID, DICOMTag);
	return result;
}

BOOL CiSiteEnterprise::EnablePreferenceApplyButton()
{
	BOOL result;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CiSiteEnterprise::GetDICOMInstance(LPCTSTR WindowID, LPCTSTR ImageUID, VARIANT* Buffer)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_PVARIANT;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		WindowID, ImageUID, Buffer);
	return result;
}

CString CiSiteEnterprise::OpenCanvasPage(LPCTSTR IntExamID, LPCTSTR IntExceptionID, BOOL Reveal, BOOL Lock, BOOL OpenNew)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		IntExamID, IntExceptionID, Reveal, Lock, OpenNew);
	return result;
}

CString CiSiteEnterprise::ListCanvasPages()
{
	CString result;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CiSiteEnterprise::GetCanvasPageStatus(LPCTSTR CanvasPageID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		CanvasPageID);
	return result;
}

BOOL CiSiteEnterprise::CloseCanvasPage(LPCTSTR CanvasPageID, BOOL DiscardChanges)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CanvasPageID, DiscardChanges);
	return result;
}

CString CiSiteEnterprise::OpenShelf(LPCTSTR CanvasPageID, LPCTSTR IntExamID, LPCTSTR IntExceptionID, BOOL Reveal)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		CanvasPageID, IntExamID, IntExceptionID, Reveal);
	return result;
}

CString CiSiteEnterprise::ListShelfs(LPCTSTR CanvasPageID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		CanvasPageID);
	return result;
}

CString CiSiteEnterprise::GetShelfStatus(LPCTSTR ShelfID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		ShelfID);
	return result;
}

BOOL CiSiteEnterprise::CloseShelf(LPCTSTR ShelfID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ShelfID);
	return result;
}

BOOL CiSiteEnterprise::AddShelfMenuItem(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::RemoveShelfMenuItem(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterShelfMenuItem(LPCTSTR Name, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::SetShelfURL(LPCTSTR ShelfID, LPCTSTR URL, long ReportWidth)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ShelfID, URL, ReportWidth);
	return result;
}

CString CiSiteEnterprise::GetShelfWindowIDs(LPCTSTR ShelfID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		ShelfID);
	return result;
}

BOOL CiSiteEnterprise::SetActivePage(LPCTSTR Name, LPCTSTR Type)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, Type);
	return result;
}

BOOL CiSiteEnterprise::AddPreferencePage(LPCTSTR Name, LPCTSTR URL, LPCTSTR Type)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, URL, Type);
	return result;
}

BOOL CiSiteEnterprise::DisplayMediaExportPage(LPCTSTR InternalExamIds, long RemoveAllExams)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		InternalExamIds, RemoveAllExams);
	return result;
}

long CiSiteEnterprise::MessageBox(LPCTSTR Msg, long nType)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Msg, nType);
	return result;
}

CString CiSiteEnterprise::FindShelfID(LPCTSTR IntExamID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		IntExamID);
	return result;
}

CString CiSiteEnterprise::FindCanvasPageID(LPCTSTR IntPatientID)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		IntPatientID);
	return result;
}

CString CiSiteEnterprise::ListMediaExportExams()
{
	CString result;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CiSiteEnterprise::AddViewSubMenu(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::AddViewSubMenuItem(LPCTSTR Name, LPCTSTR SubMenuName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, SubMenuName);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterViewSubMenu(LPCTSTR Name, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterViewSubMenuItem(LPCTSTR Name, LPCTSTR SubMenuName, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, SubMenuName, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::AddExamSubMenu(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::AddExamSubMenuItem(LPCTSTR Name, LPCTSTR SubMenuName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, SubMenuName);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterExamSubMenu(LPCTSTR Name, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterExamSubMenuItem(LPCTSTR Name, LPCTSTR SubMenuName, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, SubMenuName, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::AddShelfSubMenu(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::AddShelfSubMenuItem(LPCTSTR Name, LPCTSTR SubMenuName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, SubMenuName);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterShelfSubMenu(LPCTSTR Name, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterShelfSubMenuItem(LPCTSTR Name, LPCTSTR SubMenuName, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, SubMenuName, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::AddShelfButton(LPCTSTR pszShelfID, LPCTSTR pszButtonID, LPCTSTR pszBitMap, LPCTSTR pszToolTip)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pszShelfID, pszButtonID, pszBitMap, pszToolTip);
	return result;
}

BOOL CiSiteEnterprise::ShowPreferenceDialog()
{
	BOOL result;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CiSiteEnterprise::AddTimelineSubMenu(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::AddTimelineSubMenuItem(LPCTSTR Name, LPCTSTR SubMenuName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, SubMenuName);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterTimelineSubMenu(LPCTSTR Name, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterTimelineSubMenuItem(LPCTSTR Name, LPCTSTR SubMenuName, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, SubMenuName, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::AddTimelineMenuItem(LPCTSTR Name, BOOL* pReturn)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PBOOL;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, pReturn);
	return result;
}

BOOL CiSiteEnterprise::RemoveTimelineMenuItem(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CiSiteEnterprise::InsertAfterTimelineMenuItem(LPCTSTR Name, LPCTSTR NameAfter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, NameAfter);
	return result;
}

BOOL CiSiteEnterprise::DisplayiExportQueue()
{
	BOOL result;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CiSiteEnterprise::SetPluginVersion(LPCTSTR bstrURL, LPCTSTR bstrVersionString)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrURL, bstrVersionString);
}

BOOL CiSiteEnterprise::CopyImageToClipboard(LPCTSTR WndID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		WndID);
	return result;
}

CString CiSiteEnterprise::SavePresentationState(LPCTSTR bstrShelfID, LPCTSTR pszDesc, long nType)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		bstrShelfID, pszDesc, nType);
	return result;
}

BOOL CiSiteEnterprise::LoadPresentationState(LPCTSTR bstrShelfID, LPCTSTR bstrName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrShelfID, bstrName);
	return result;
}

BOOL CiSiteEnterprise::DeleteAnnotation(LPCTSTR bstrWindowID, LPCTSTR bstrToken)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrWindowID, bstrToken);
	return result;
}

BOOL CiSiteEnterprise::WriteDICOMInstance(LPCTSTR bstrWindowID, LPCTSTR bstrImageUID, LPCTSTR bstrPathName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrWindowID, bstrImageUID, bstrPathName);
	return result;
}

CString CiSiteEnterprise::OpenCanvasPagePS(LPCTSTR bstrIntExamID, LPCTSTR bstrIntExceptionID, long bReveal, long bstrLock, long bOpenNew, LPCTSTR bstrStateName)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		bstrIntExamID, bstrIntExceptionID, bReveal, bstrLock, bOpenNew, bstrStateName);
	return result;
}

CString CiSiteEnterprise::OpenShelfPS(LPCTSTR CanvasPageID, LPCTSTR IntExamID, LPCTSTR IntExceptionID, long Reveal, LPCTSTR bstrStateName)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x4f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		CanvasPageID, IntExamID, IntExceptionID, Reveal, bstrStateName);
	return result;
}

LPDISPATCH CiSiteEnterprise::CopyWindowToPicture(LPCTSTR bstrWindowID, long nLeft, long nTop, long nRight, long nBottom)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x50, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		bstrWindowID, nLeft, nTop, nRight, nBottom);
	return result;
}

LPDISPATCH CiSiteEnterprise::CopyImageToPicture(LPCTSTR bstrWindowID, long nLeft, long nTop, long nRight, long nBottom)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x51, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		bstrWindowID, nLeft, nTop, nRight, nBottom);
	return result;
}

void CiSiteEnterprise::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
